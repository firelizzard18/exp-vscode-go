{
  "name": "exp-vscode-go",
  "publisher": "ethan-reesor",
  "displayName": "Go Companion",
  "description": "An unofficial companion to the official Go extension, providing experimental features",
  "version": "0.0.8",
  "icon": "docs/assets/icon.png",
  "license": "MIT",
  "homepage": "https://github.com/firelizzard18/exp-vscode-go",
  "repository": {
    "type": "git",
    "url": "https://github.com/firelizzard18/exp-vscode-go"
  },
  "bugs": {
    "url": "https://github.com/golang/vscode-go/issues"
  },
  "engines": {
    "vscode": "^1.75.0"
  },
  "categories": [
    "Testing"
  ],
  "activationEvents": [
    "onLanguage:go",
    "onView:workbench.view.testing"
  ],
  "private": true,
  "main": "./dist/main.js",
  "extensionDependencies": [
    "golang.go"
  ],
  "scripts": {
    "bundle": "esbuild main=src/extension.ts pprof=webview/pprof/App.tsx --bundle --outdir=dist --external:vscode --external:react/jsx-runtime --format=cjs --platform=node --loader:.frag=text --loader:.vert=text",
    "watch": "yarn run bundle -- --sourcemap=inline --watch",
    "package": "vsce package",
    "lint": "eslint src --ext ts",
    "tests": "yarn run jest",
    "clean": "rimraf dist out",
    "check-types": "tsc -p src && tsc -p webview",
    "vscode:prepublish": "yarn run check-types && yarn run lint && yarn run bundle"
  },
  "contributes": {
    "customEditors": [
      {
        "viewType": "goExp.pprof",
        "displayName": "Go pprof viewer",
        "priority": "default",
        "selector": [
          {
            "filenamePattern": "*.pprof"
          }
        ]
      }
    ],
    "configuration": {
      "title": "Go Companion",
      "properties": {
        "exp-vscode-go.testExplorer.enable": {
          "order": 0,
          "type": [
            "string",
            "boolean"
          ],
          "default": "auto",
          "scope": "window",
          "markdownDescription": "Enable the Go test explorer. By default the test explorer is enabled if the Go extension is a prerelease version and disabled otherwise.",
          "enum": [
            true,
            false,
            "auto"
          ],
          "enumItemLabels": [
            "Enable",
            "Disable",
            "Automatic"
          ]
        },
        "exp-vscode-go.testExplorer.discovery": {
          "order": 1,
          "type": "string",
          "scope": "resource",
          "markdownDescription": "Enable automatic discovery of tests.",
          "default": "on",
          "enum": [
            "on",
            "off"
          ],
          "markdownEnumDescriptions": [
            "Enable automatic discovery of tests in open workspaces",
            "Disable automatic discovery. No tests are shown until a file is open, and only tests within the same package will be shown. Tests within that package will continue to be shown (even if all files are closed) until the editor/extension is restarted."
          ]
        },
        "exp-vscode-go.testExplorer.exclude": {
          "type": "object",
          "default": {},
          "markdownDescription": "Exclude directories and/or files from the test explorer. This is merged with `#files.exclude#`. This setting takes precedence if an entry appears in both. If `#files.exclude#` contains `\"examples\": true` and this setting contains `\"examples\": false`, the latter will take precedence - matching entries will be excluded from the file explorer but included in the test explorer. Otherwise if either this setting or `#files.exclude#` contains an entry with a value of `true`, tests and/or packages matching that entry will be excluded from the test explorer.",
          "scope": "resource",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "exp-vscode-go.testExplorer.showFiles": {
          "type": "boolean",
          "default": false,
          "scope": "resource",
          "enum": [
            false,
            true
          ],
          "enumItemLabels": [
            "Tests are contained within packages",
            "Tests are contained within files"
          ],
          "markdownEnumDescriptions": [
            "- pkg\n  - TestFoo",
            "- pkg\n  - foo_test.go\n    - TestFoo"
          ]
        },
        "exp-vscode-go.testExplorer.nestPackages": {
          "type": "boolean",
          "default": false,
          "scope": "resource",
          "markdownDescription": "Directories that are not packages are always ignored. If `foo` is not a package, foo/bar will not be nested regardless of this setting:\n  - example.com\n    - foo/bar",
          "enum": [
            false,
            true
          ],
          "enumItemLabels": [
            "Packages are siblings",
            "Packages are nested"
          ],
          "markdownEnumDescriptions": [
            "- example.com\n  - foo\n  - foo/bar",
            "- example.com\n  - foo\n    - bar"
          ]
        },
        "exp-vscode-go.testExplorer.nestSubtests": {
          "type": "boolean",
          "default": true,
          "scope": "resource",
          "enum": [
            false,
            true
          ],
          "enumItemLabels": [
            "Subtests are siblings",
            "Subtests are nested"
          ],
          "markdownEnumDescriptions": [
            "- TestFoo\n  - Bar\n    - Baz",
            "- TestFoo\n- TestFoo/Bar\n- TestFoo/Bar/Baz"
          ]
        },
        "exp-vscode-go.testExplorer.codeLens": {
          "type": [
            "string",
            "boolean"
          ],
          "default": false,
          "scope": "resource",
          "markdownDescription": "Show code lenses for running and debugging tests",
          "enum": [
            false,
            true,
            "debug",
            "run"
          ],
          "enumItemLabels": [
            "Disable code lenses",
            "Enable all code lenses",
            "Enable \"run test\" code lenses",
            "Enable \"debug test\" code lenses"
          ]
        },
        "exp-vscode-go.testExplorer.dynamicSubtestLimit": {
          "type": "integer",
          "default": 50,
          "scope": "resource",
          "markdownDescription": "Limits the number of (dynamic) subtests that are included. If the number of subtests of a test reaches this limit, additional subtests will be ignored. Set this to 0 to disable the limit, though this may cause the test explorer to perform badly."
        },
        "exp-vscode-go.testExplorer.runPackageBenchmarks": {
          "type": "boolean",
          "default": false,
          "scope": "resource",
          "markdownDescription": "Always run benchmarks. By default (with this set to `false`), benchmarks are excluded from test runs unless benchmarks are explicitly selected or the run contains nothing but benchmarks."
        }
      }
    },
    "commands": [
      {
        "command": "goExp.configureCoverageRunProfile",
        "title": "Go Companion: Configure Coverage Run Profile",
        "description": "Workaround for https://github.com/microsoft/vscode/issues/237106"
      },
      {
        "command": "goExp.renderDocs",
        "title": "Go Companion: Render Documentation",
        "description": "Render the documentation for the current selection."
      },
      {
        "command": "goExp.testExplorer.refresh",
        "title": "Go Companion: Refresh Test",
        "description": "Refresh a test in the test explorer. Only available as a context menu option in the test explorer.",
        "category": "Test",
        "icon": "$(refresh)"
      },
      {
        "command": "goExp.test.run",
        "title": "Go Companion: Run Test",
        "category": "Test"
      },
      {
        "command": "goExp.test.debug",
        "title": "Go Companion: Debug Test",
        "category": "Test"
      },
      {
        "command": "goExp.browser.back",
        "title": "Back",
        "icon": "$(arrow-left)"
      },
      {
        "command": "goExp.browser.refresh",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "command": "goExp.browser.forward",
        "title": "Forward",
        "icon": "$(arrow-right)"
      },
      {
        "command": "goExp.pprof.showSource",
        "title": "Show Source",
        "description": "Show the source code for the selected function"
      },
      {
        "command": "goExp.pprof.ignore",
        "title": "Ignore",
        "description": "Ignore the selected function"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "goExp.testExplorer.refresh",
          "when": "false"
        },
        {
          "command": "goExp.test.run",
          "when": "false"
        },
        {
          "command": "goExp.test.debug",
          "when": "false"
        },
        {
          "command": "goExp.browser.back",
          "when": "false"
        },
        {
          "command": "goExp.browser.refresh",
          "when": "false"
        },
        {
          "command": "goExp.browser.forward",
          "when": "false"
        },
        {
          "command": "goExp.pprof.showSource",
          "when": "false"
        },
        {
          "command": "goExp.pprof.ignore",
          "when": "false"
        }
      ],
      "editor/context": [
        {
          "when": "editorTextFocus && resourceLangId == go",
          "command": "goExp.renderDocs",
          "group": "Go group 1"
        }
      ],
      "testing/item/context": [
        {
          "command": "goExp.testExplorer.refresh",
          "when": "controllerId == 'goExp'",
          "group": "inline"
        }
      ],
      "webview/context": [
        {
          "command": "goExp.pprof.showSource",
          "when": "webviewId == 'goExp.pprof' && hoveredFunction"
        },
        {
          "command": "goExp.pprof.ignore",
          "when": "webviewId == 'goExp.pprof' && hoveredFunction"
        }
      ],
      "editor/title": [
        {
          "command": "goExp.browser.back",
          "group": "navigation@1",
          "when": "activeWebviewPanelId == 'goExp.browser'"
        },
        {
          "command": "goExp.browser.refresh",
          "group": "navigation@2",
          "when": "activeWebviewPanelId == 'goExp.browser'"
        },
        {
          "command": "goExp.browser.forward",
          "group": "navigation@3",
          "when": "activeWebviewPanelId == 'goExp.browser'"
        }
      ]
    }
  },
  "devDependencies": {
    "@jest/globals": "^29.7.0",
    "@types/chroma-js": "^2.4.4",
    "@types/css-modules": "^1.0.5",
    "@types/deep-equal": "^1.0.4",
    "@types/mocha": "^10.0.7",
    "@types/node": "~16.x",
    "@types/vscode": "~1.75.0",
    "@typescript-eslint/eslint-plugin": "^7.14.1",
    "@typescript-eslint/parser": "^7.11.0",
    "@vscode/test-cli": "^0.0.9",
    "@vscode/test-electron": "^2.4.0",
    "@vscode/vsce": "^3.1.0",
    "copyfiles": "^2.4.1",
    "esbuild": "^0.21.5",
    "eslint": "^8.57.0",
    "expect": "^29.7.0",
    "gts": "^5.3.1",
    "jest": "^29.7.0",
    "moment": "^2.30.1",
    "npm-run-all": "^4.1.5",
    "rimraf": "^6.0.1",
    "semver": "^7.6.3",
    "ts-jest": "^29.2.3",
    "ts-node": "^10.9.2",
    "typescript": "^5.4.5",
    "vscode-debugprotocol": "^1.51.0",
    "vscode-languageserver-types": "^3.17.5"
  },
  "dependencies": {
    "@streamparser/json": "^0.0.21",
    "axios": "^1.7.7",
    "chroma-js": "^3.1.1",
    "deep-equal": "^2.2.3",
    "gl-matrix": "^3.4.3",
    "minimatch": "^10.0.1",
    "node-html-parser": "^6.1.13",
    "tree-kill": "^1.2.2"
  }
}